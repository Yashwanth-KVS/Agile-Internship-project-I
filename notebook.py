# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19nCbd07ryM2BsKSw3x6qmjjJkQCxdl9V
"""

pip install --upgrade category_encoders

import pandas as pd
import numpy as np
import category_encoders as ce
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

loan_approval_data = pd.read_csv('sample_data/loan_approval_dataset.csv')
display(loan_approval_data.columns)
display(loan_approval_data)
print(loan_approval_data.isnull().any())

print(loan_approval_data[' education'].unique())
print(loan_approval_data[' self_employed'].unique())
print(loan_approval_data[' loan_status'].unique())

# encoder_education=ce.OneHotEncoder(cols=' education',handle_unknown='return_nan',return_df=True,use_cat_names=True)
# loan_approval_data_encoded = encoder_education.fit_transform(loan_approval_data)

# encoder_self_employed=ce.OneHotEncoder(cols=' self_employed',handle_unknown='return_nan',return_df=True,use_cat_names=True)
# loan_approval_data_encoded = encoder_self_employed.fit_transform(loan_approval_data_encoded)

le=LabelEncoder()
loan_approval_data[' education'] = le.fit_transform(loan_approval_data[' education'])
loan_approval_data[' self_employed'] = le.fit_transform(loan_approval_data[' self_employed'])
loan_approval_data[' loan_status'] = le.fit_transform(loan_approval_data[' loan_status'])

display(loan_approval_data)

col_names = loan_approval_data.columns
print(col_names)
# apply standardization on numerical features
for i in col_names:

    # fit on training data column
    scale = StandardScaler().fit(loan_approval_data[[i]])

    # transform the training data column
    loan_approval_data[i] = scale.transform(loan_approval_data[[i]])

display(loan_approval_data)

cred_worthiness_data = pd.read_excel('sample_data/CreditWorthiness.xlsx')
display(cred_worthiness_data.columns)
display(cred_worthiness_data)

print(cred_worthiness_data.isnull().any())

print(cred_worthiness_data['Cbal'].unique())
print(cred_worthiness_data['Chist'].unique())
print(cred_worthiness_data['Cpur'].unique())
print(cred_worthiness_data['Sbal'].unique())
print(cred_worthiness_data['Edur'].unique())
print(cred_worthiness_data['MSG'].unique())
print(cred_worthiness_data['Oparties'].unique())
print(cred_worthiness_data['Rdur'].unique())
print(cred_worthiness_data['Prop'].unique())
print(cred_worthiness_data['inPlans'].unique())
print(cred_worthiness_data['Htype'].unique())
print(cred_worthiness_data['JobType'].unique())
print(cred_worthiness_data['telephone'].unique())
print(cred_worthiness_data['foreign'].unique())
print(cred_worthiness_data['creditScore'].unique())


le=LabelEncoder()
cred_worthiness_data['Cbal'] = le.fit_transform(cred_worthiness_data['Cbal'])
cred_worthiness_data['Chist'] = le.fit_transform(cred_worthiness_data['Chist'])
cred_worthiness_data['Cpur'] = le.fit_transform(cred_worthiness_data['Cpur'])
cred_worthiness_data['Sbal'] = le.fit_transform(cred_worthiness_data['Sbal'])
cred_worthiness_data['Edur'] = le.fit_transform(cred_worthiness_data['Edur'])
cred_worthiness_data['MSG'] = le.fit_transform(cred_worthiness_data['MSG'])
cred_worthiness_data['Oparties'] = le.fit_transform(cred_worthiness_data['Oparties'])
cred_worthiness_data['Rdur'] = le.fit_transform(cred_worthiness_data['Rdur'])
cred_worthiness_data['Prop'] = le.fit_transform(cred_worthiness_data['Prop'])
cred_worthiness_data['inPlans'] = le.fit_transform(cred_worthiness_data['inPlans'])
cred_worthiness_data['Htype'] = le.fit_transform(cred_worthiness_data['Htype'])
cred_worthiness_data['JobType'] = le.fit_transform(cred_worthiness_data['JobType'])
cred_worthiness_data['telephone'] = le.fit_transform(cred_worthiness_data['telephone'])
cred_worthiness_data['foreign'] = le.fit_transform(cred_worthiness_data['foreign'])
cred_worthiness_data['creditScore'] = le.fit_transform(cred_worthiness_data['creditScore'])

display(cred_worthiness_data)

col_names = cred_worthiness_data.columns
print(col_names)
# apply standardization on numerical features
for i in col_names:

    # fit on training data column
    print(i)
    scale = StandardScaler().fit(cred_worthiness_data[[i]])

    # transform the training data column
    cred_worthiness_data[i] = scale.transform(cred_worthiness_data[[i]])

display(cred_worthiness_data)

parse_dates = ['Date']
household_transactions_data = pd.read_csv('sample_data/Daily Household Transactions.csv', parse_dates=parse_dates)
display(household_transactions_data.columns)
display(household_transactions_data)
print(household_transactions_data.isnull().any())

print(household_transactions_data.isnull().any())

household_transactions_data["Subcategory"].fillna("Miscellaneous", inplace = True)
household_transactions_data["Note"].fillna("Untracked", inplace = True)

print(household_transactions_data.isnull().any())

print(household_transactions_data['Mode'].unique())
print(household_transactions_data['Category'].unique())
print(household_transactions_data['Subcategory'].unique())
print(household_transactions_data['Note'].unique())
print(household_transactions_data['Income/Expense'].unique())
print(household_transactions_data['Currency'].unique())

le=LabelEncoder()
household_transactions_data['Mode'] = le.fit_transform(household_transactions_data['Mode'])
household_transactions_data['Category'] = le.fit_transform(household_transactions_data['Category'])
household_transactions_data['Subcategory'] = le.fit_transform(household_transactions_data['Subcategory'])
household_transactions_data['Note'] = le.fit_transform(household_transactions_data['Note'])
household_transactions_data['Income/Expense'] = le.fit_transform(household_transactions_data['Income/Expense'])
household_transactions_data['Currency'] = le.fit_transform(household_transactions_data['Currency'])

display(household_transactions_data)

col_names = household_transactions_data.columns
print(col_names)
# apply standardization on numerical features
for i in col_names:
    if i != 'Date':
      # fit on training data column
      print(i)
      scale = StandardScaler().fit(household_transactions_data[[i]])

      # transform the training data column
      household_transactions_data[i] = scale.transform(household_transactions_data[[i]])

display(household_transactions_data)

from datetime import datetime
household_transactions_data.Date.dtype
household_transactions_data['Date_year'] = pd.DatetimeIndex(household_transactions_data['Date']).year
#display(household_transactions_data['Date_year'])
household_transactions_data['Date_month'] = pd.DatetimeIndex(household_transactions_data['Date']).month
#display(household_transactions_data['Date_month'])
household_transactions_data['Date_day'] = pd.DatetimeIndex(household_transactions_data['Date']).day
household_transactions_data = household_transactions_data.drop('Date', axis=1)
#display(household_transactions_data['Date_day'])
#display(pd.DatetimeIndex(household_transactions_data['Date']).year)
#print(datetime(household_transactions_data['Date']).year)
display(household_transactions_data)
